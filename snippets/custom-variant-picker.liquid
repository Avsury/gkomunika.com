<style>
  .quantity-input {
    display: inline-flex;
    align-items: center;
    border: 1px solid var(--color-primary);
    border-radius: 24px;
    overflow: hidden;
    width: fit-content;
  }

  .quantity-btn {
    background-color: transparent;
    border: none;
    padding: 8px 12px;
    font-size: 16px;
    color: var(--color-primary);
    cursor: pointer;
    user-select: none;
  }

  .quantity-number {
    width: 40px;
    text-align: center;
    border: none;
    font-size: 16px;
    outline: none;
    color: var(--color-primary);
  }

  .quantity-btn:disabled {
    color: var(--color-primary);
    cursor: not-allowed;
  }

  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield;
  }
  .quantity-btn:disabled {
    cursor: not-allowed;
    opacity: 0.4;
  }

  .disabled-option {
    color: #bbb;
  }

  .variant-option__wrapper {
    display: flex;
    gap: 10px;
    width: 100%;
  }
  .variant-option {
    display: flex;
    
    flex-direction: column;
    min-width: 0;
  }
  
  .variant-picker__label {
    font-weight: bold;
  }
  
  .variant-dropdown {
    padding: 15px;
    border-radius: 15px;
    border: 1px solid var(--color-primary);
    font-size: var(--font-large);
    color: var(--color-primary);
    outline: none;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url({{ 'icon-dropdown.svg' | asset_url }});
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 15px;
    padding-right: 35px;
  }
      
  #reset-plan {
    border: none;
    width: 150px;
    color: var(--color-secondary);
    font-size: var(--font-large);
    text-align: left;
    background: transparent;
    text-decoration: underline;
    margin-bottom: 10px;
  }

  .variant-picker-btn__mobile,
  .variant-picker-btn {
    display: flex;
    gap: 15px;
    width: 500px;
  }

  .variant-picker-btn__mobile button,
  .variant-picker-btn button {
    width: 100%;
    border-radius: 15px;
    font-size: var(--font-large);
    font-weight: bold;
    color: var(--color-neutral);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
  }

  
  .variant-picker-btn__mobile button:active,
  .variant-picker-btn button:active {
    transform: scale(0.96);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .variant-picker-btn__mobile .cart,
  .variant-picker-btn .cart {
    border: 1px groove var(--secondary);
    background-color: var(--color-secondary);
  }
  
  .variant-picker-btn__mobile .buy,
  .variant-picker-btn .buy {
    border: 1px groove var(--color-primary);
    background-color: var(--color-primary);
  }
  #variant-price {
    color: var(--color-secondary) !important;
    margin-top: 7px;
  }
  .money,
  .buckscc-money {
    color: var(--color-secondary) !important;
    font-size: var(--font-supper-large);
    font-weight: bold;
  } 


  .variant-dropdown.variant-warning {
    border-color: red;
    box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.3);
    position: relative;
  }
  
  .variant-dropdown.variant-warning::after {
    content: "Please select this option";
    position: absolute;
    left: 10px;
    top: 100%;
    margin-top: 4px;
    background: red;
    color: white;
    padding: 4px 8px;
    font-size: 12px;
    border-radius: 5px;
    white-space: nowrap;
    z-index: 1000;
  }

</style>

{% style %}
  .variant-picker-btn__mobile {
    display: none;
  }
@media (max-width: 1440px) {
  .variant-picker-btn__mobile,
  .variant-picker-btn {
    width: 100%;
  }
}
@media (max-width: 768px) {
  .variant-picker-btn__mobile {
    display: block;
  }
  .variant-picker-btn {
    display: none;
  }
  .variant-picker-btn__mobile {
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    padding: 20px 24px;
    background-color: var(--color-neutral);
    z-index: 999;
  }
  .variant-picker-btn__mobile-wrapper {
    display: flex;
    gap: 10px;
  }
  #variant-price-desktop {
    display: none;
  }
  /* #selected-variant-display {
    font-size: var(--font-large);
    font-weight: 500;
    color: var(--color-secondary);
    border: 1px solid var(--color-border);
  } */
}
{% endstyle %}

<div id="custom-variant-selector">
  {% assign min_price = product.variants.first.price %}
  {% assign max_price = product.variants.first.price %}
  {% for variant in product.variants %}
    {% if variant.price < min_price %}
      {% assign min_price = variant.price %}
    {% endif %}
    {% if variant.price > max_price %}
      {% assign max_price = variant.price %}
    {% endif %}
  {% endfor %}

  {% assign min_price_formatted = min_price | money_with_currency %}
  {% assign max_price_formatted = max_price | money_with_currency %}

  <div class="variant-option__wrapper">
    {% for option in product.options_with_values %}
      <div class="variant-option" data-option-index="{{ forloop.index0 }}">
        <label class="variant-picker__label">{{ option.name }}</label>
        <select class="variant-dropdown" data-option-name="{{ option.name }}">
  <option value="" disabled selected hidden>Choose Option</option>
  {% assign values_seen = "" %}
  {% for value in option.values %}
    {% unless values_seen contains value %}
      <option value="{{ value }}">{{ value }}</option>
      {% assign values_seen = values_seen | append: value | append: "," %}
    {% endunless %}
  {% endfor %}
</select>

      </div>
    {% endfor %}
  </div>

  <!-- Quantity -->
  <div class="quantity-wrapper" style="margin: 1rem 0;">
    <label class="variant-picker__label" for="quantity" style="display: block; margin-bottom: 4px;">Quantity:</label>
    <div class="quantity-input">
      <button type="button" class="quantity-btn" id="quantity-decrease" style="border-right: 1px solid var(--color-border);">
        <span class="svg-wrapper">{{ 'icon-minus.svg' | inline_asset_content }}</span>
      </button>
      <input type="number" id="quantity" name="quantity" min="1" value="1" class="quantity-number">
      <button type="button" class="quantity-btn" id="quantity-increase" style="border-left: 1px solid var(--color-border);">
        <span class="svg-wrapper">{{ 'icon-plus.svg' | inline_asset_content }}</span>
      </button>
    </div>
  </div>
  
  <!-- Tombol reset -->
  <button id="reset-plan" type="button">Reset Plan</button>

  <!-- Tombol cart dan buy -->
  <div class="variant-picker-btn">
    <button class="cart" type="button" id="add-to-cart"><p>Add to Cart</p></button>
    <button class="buy" type="button" id="buy-now-button"><p>Buy Now</p></button>
  </div>
</div>

<!-- Harga varian tersembunyi -->
<div id="variant-prices" style="display: none;">
  {% for variant in product.variants %}
    <span class="money" data-variant-id="{{ variant.id }}">
      {{ variant.price | money_with_currency }}
    </span>
  {% endfor %}
</div>

<!-- Versi mobile -->
<div class="variant-picker-btn__mobile">
  <h2>{{ product.title }}</h2>
  <span id="selected-variant-display">Selected Variant</span>

  <div id="variant-price-mobile" class="money">
    {{ min_price_formatted }}{% unless min_price == max_price %} - {{ max_price_formatted }}{% endunless %}
  </div>
  <div class="variant-picker-btn__mobile-wrapper">
    <button class="cart" type="button" id="add-to-cart-mobile"><p>Add to Cart</p></button>
    <button class="buy" type="button" id="buy-now-button-mobile"><p>Buy Now</p></button>
  </div>
</div>

<div class="variant-picker-popup" id="variant-popup" style="display: none;">
  <span id="variant-popup-message"></span>
</div>

{% style %}
  .variant-picker-popup {
    padding: 10px;
    min-height: 0;
    background-color: var(--color-primary);
    color: var(--color-neutral);
    font-size: var(--font-large);
    border-radius: 10px;
    width: 270px;
    box-shadow: var(--box-shadow);
    position: fixed;
    top: 80px;
    right: 10%;
    z-index: 999;
    text-align: center;
  }
{% endstyle %}

<script>
  const productVariants = {{ product.variants | json }};
  const variantDropdowns = document.querySelectorAll('.variant-dropdown');
  const priceDivDesktop = document.getElementById('variant-price-desktop');
  const priceDivMobile = document.getElementById('variant-price-mobile');
  const resetBtn = document.getElementById('reset-plan');
  const quantityInput = document.getElementById('quantity');
  const minusBtn = document.getElementById('quantity-decrease');
  const plusBtn = document.getElementById('quantity-increase');
  const addToCartButton = document.getElementById('add-to-cart');
  const buyNowButton = document.getElementById('buy-now-button');
  const selectedVariantDisplay = document.getElementById('selected-variant-display');


  const addToCartButtonDesktop = document.getElementById('add-to-cart');
  const buyNowButtonDesktop = document.getElementById('buy-now-button');
  const addToCartButtonMobile = document.getElementById('add-to-cart-mobile');
  const buyNowButtonMobile = document.getElementById('buy-now-button-mobile');
  addToCartButtonDesktop?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonDesktop?.addEventListener("click", () => handleCartAction("buy"));
  
  addToCartButtonMobile?.addEventListener("click", () => handleCartAction("add"));
  buyNowButtonMobile?.addEventListener("click", () => handleCartAction("buy"));
  


  const defaultPriceHTML = priceDivDesktop.innerHTML;
  const defaultPriceMobileHTML = priceDivMobile.innerHTML;

  function getSelectedOptions() {
    return Array.from(variantDropdowns).map(select => select.value);
  }

  function updateDropdownOptions() {
    const selectedOptions = getSelectedOptions();

    variantDropdowns.forEach((select, index) => {
      Array.from(select.options).forEach(option => {
        if (option.value === "") {
          option.disabled = false;
          option.classList.remove('disabled-option');
          return;
        }

        const testOptions = [...selectedOptions];
        testOptions[index] = option.value;

        const match = productVariants.some(variant =>
          variant.options.every((opt, i) =>
            testOptions[i] === "" || testOptions[i] === opt
          )
        );

        if (!match) {
          option.disabled = true;
          option.classList.add('disabled-option');
        } else {
          option.disabled = false;
          option.classList.remove('disabled-option');
        }
      });

      if (select.options[select.selectedIndex]?.disabled) {
        select.selectedIndex = 0;
      }
    });
  }

  function findVariant() {
    const selectedOptions = getSelectedOptions();

    if (selectedOptions.includes("")) {
      priceDivDesktop.innerHTML = defaultPriceHTML;
      priceDivMobile.innerHTML = defaultPriceMobileHTML;
      if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Pilih varian";
      updateDropdownOptions();
      return null;
    }

    const matchedVariant = productVariants.find(variant =>
      variant.options.every((opt, index) => opt === selectedOptions[index])
    );

    if (matchedVariant) {
      if (matchedVariant.available) {
        const moneySpan = document.querySelector(`#variant-prices span[data-variant-id="${matchedVariant.id}"]`);
        if (moneySpan) {
          priceDivDesktop.innerHTML = moneySpan.outerHTML;
          priceDivMobile.innerHTML = moneySpan.outerHTML;
        }
      } else {
        priceDivDesktop.textContent = "Varian tidak tersedia";
        priceDivMobile.textContent = "Varian tidak tersedia";
      }
    } else {
      priceDivDesktop.textContent = "Varian tidak ditemukan";
      priceDivMobile.textContent = "Varian tidak ditemukan";
    }

    if (selectedVariantDisplay) {
      const selected = selectedOptions.filter(v => v !== "").join(" - ");
      selectedVariantDisplay.textContent = selected || "Choose Variant";
    }

    updateDropdownOptions();

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }

    return matchedVariant;
  }

  function adjustQuantity(delta) {
    const current = parseInt(quantityInput.value) || 1;
    quantityInput.value = Math.max(1, current + delta);
  }

  minusBtn?.addEventListener('click', () => adjustQuantity(-1));
  plusBtn?.addEventListener('click', () => adjustQuantity(1));

  resetBtn.addEventListener('click', () => {
    variantDropdowns.forEach(select => {
      select.selectedIndex = 0;
    });
    quantityInput.value = 1;
    priceDivDesktop.innerHTML = defaultPriceHTML;
    priceDivMobile.innerHTML = defaultPriceMobileHTML;
    if (selectedVariantDisplay) selectedVariantDisplay.textContent = "Selected Variant";
    updateDropdownOptions();

    if (typeof Currency !== 'undefined' && typeof Currency.convertAll === 'function') {
      Currency.convertAll(shopCurrency, Currency.currentCurrency);
    }
  });

  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const countEl = document.getElementById('cart-count');
        if (countEl) {
          countEl.textContent = cart.item_count;
        }
      })
      .catch(error => {
        console.error("Failed to update cart count:", error);
      });
  }
  

  function handleCartAction(action) {
    const variant = findVariant();
    const quantity = parseInt(quantityInput.value) || 1;
  
    if (!variant || !variant.available) {
      let hasEmpty = false;
      variantDropdowns.forEach(select => {
        if (select.value === "") {
          select.classList.add("variant-warning");
          hasEmpty = true;
        }
      });
    
      if (hasEmpty) {
        const firstEmpty = Array.from(variantDropdowns).find(select => select.value === "");
        if (firstEmpty) {
          firstEmpty.scrollIntoView({ behavior: "smooth", block: "center" });
        }
      }
    
      return;
    }

  
    const payload = { id: variant.id, quantity: quantity };
    const popup = document.getElementById("variant-popup");
  
    function showPopup(message) {
      const messageEl = document.getElementById("variant-popup-message");
      if (messageEl) {
        messageEl.textContent = message;
      }
  
      popup.style.display = "block";
      setTimeout(() => {
        popup.style.display = "none";
      }, 2000);
    }
  
    if (action === "buy") {
      fetch("/cart/clear.js", { method: "POST" }).then(() => {
        fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        }).then(() => {
          window.location.href = "/checkout";
        });
      });
    } else {
      fetch("/cart/add.js", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest"
        },
        body: JSON.stringify(payload)
      })
      .then(res => res.json())
      .then(() => {
        showPopup("Item successfully added to cart.");
        updateCartCount(); // ← tambahkan ini
      })
      .catch(err => {
        console.error("Add to cart failed:", err);
        showPopup("Failed to add product");
      });
    }
  }


  addToCartButton?.addEventListener("click", () => handleCartAction("add"));
  buyNowButton?.addEventListener("click", () => handleCartAction("buy"));

  variantDropdowns.forEach(select => {
    select.addEventListener('change', findVariant);
  });

   // Scroll ke variant selector saat tombol "Selected Variant" ditekan (mobile)
   selectedVariantDisplay?.addEventListener('click', () => {
    const variantWrapper = document.querySelector('.variant-option__wrapper');
    if (variantWrapper) {
      const rect = variantWrapper.getBoundingClientRect();
      const offsetTop = window.scrollY + rect.top;
      const offsetMiddle = offsetTop - (window.innerHeight / 2) + (rect.height / 2) + 45; // sedikit ke atas

      window.scrollTo({
        top: offsetMiddle,
        behavior: 'smooth'
      });
    }
  });

  // Initial update
  updateDropdownOptions();
</script>
